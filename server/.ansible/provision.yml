- name: Velach Bot Server Provision
  hosts: all
  vars:
    DIST_BINARY_DIR: "{{ lookup('ansible.builtin.env', 'GITHUB_WORKSPACE') }}/server/dist-binary"
  tasks:
    - name: Install and configure basic software
      block:
        - name: Update all packages to their latest version
          ansible.builtin.apt:
            name: "*"
            state: latest

        - name: Install packages
          ansible.builtin.apt:
            update_cache: true
            name:
              - postgresql
              - python3-pip
            state: present

        - name: Install Psycopg2
          ansible.builtin.pip:
            name: psycopg2-binary

        - name: Reboot server
          ansible.builtin.reboot:
            reboot_timeout: 3600

    - name: Setup OS user
      block:
        - name: Create user group
          ansible.builtin.group:
            name: "{{ OS_GROUP }}"
            state: present

        - name: Create user
          ansible.builtin.user:
            name: "{{ OS_USER }}"
            password: "{{ OS_PASSWORD }}"
            state: present

    - name: Create and configure database
      become: true
      become_user: postgres
      block:
        - name: Create bot database
          community.postgresql.postgresql_db:
            name: "{{ DB_NAME }}"

        - name: Create bot database user
          community.postgresql.postgresql_user:
            name: "{{ DB_USER }}"
            password: "{{ DB_PASSWORD }}"
            encrypted: true

        - name: Grant database privileges to bot user
          community.postgresql.postgresql_privs:
            database: "{{ DB_NAME }}"
            type: database
            roles: "{{ DB_USER }}"
            privs: ALL
            state: present

    - name: Copy executables
      block:
        - name: Create bot directory
          ansible.builtin.file:
            path: "{{ APP_DIR }}"
            owner: "{{ OS_USER }}"
            group: "{{ OS_GROUP }}"
            state: directory
            recurse: true

        - name: Copy server executable
          ansible.builtin.copy:
            src: "{{ DIST_BINARY_DIR }}/main"
            dest: "{{ APP_DIR }}"
            owner: "{{ OS_USER }}"
            group: "{{ OS_GROUP }}"
            mode: "755"

        - name: Copy CLI executable
          ansible.builtin.copy:
            src: "{{ DIST_BINARY_DIR }}/cli"
            dest: "{{ APP_DIR }}"
            owner: "{{ OS_USER }}"
            group: "{{ OS_GROUP }}"
            mode: "755"

    - name: Prepare DB
      become: true
      become_user: "{{ OS_USER }}"
      environment:
        VELACH_BOT_DROPBOX_TOKEN: "{{ DROPBOX_TOKEN }}"
        VELACH_BOT_DB_DATABASE: "{{ DB_NAME }}"
        VELACH_BOT_DB_USER: "{{ DB_USER }}"
        VELACH_BOT_DB_PASSWORD: "{{ DB_PASSWORD }}"
      block:
        - name: Fetch latest DB dump
          ansible.builtin.command:
            chdir: "{{ APP_DIR }}"
            cmd: "./cli --download-latest-dump"

        - name: Get stat of a dump file
          ansible.builtin.stat:
            path: "{{ APP_DIR }}/velach-bot-latest.sql"
          register: dump

        - name: Restore DB from dump
          when: dump.stat.exists
          block:
            - name: Restore dump
              community.postgresql.postgresql_db:
                name: "{{ DB_NAME }}"
                login_user: "{{ DB_USER }}"
                login_password: "{{ DB_PASSWORD }}"
                target: "{{ APP_DIR }}/velach-bot-latest.sql"
                state: "restore"

            - name: Delete dump file
              ansible.builtin.file:
                path: "{{ APP_DIR }}/velach-bot-latest.sql"
                state: absent

        - name: Create empty DB
          when: not dump.stat.exists
          ansible.builtin.command:
            chdir: "{{ APP_DIR }}"
            cmd: "./cli --create-tables"

    - name: Setup systemd
      block:
        - name: Emit server unit
          ansible.builtin.template:
            src: units/velach_bot_server.service.j2
            dest: /lib/systemd/system/velach_bot_server.service

        - name: Emit DB backup unit
          ansible.builtin.template:
            src: units/velach_bot_backup_db.service.j2
            dest: /lib/systemd/system/velach_bot_backup_db.service

        - name: Emit DB backup timer
          ansible.builtin.template:
            src: units/velach_bot_backup_db.timer.j2
            dest: /lib/systemd/system/velach_bot_backup_db.timer

        - name: Reload units
          ansible.builtin.systemd:
            daemon_reload: true
